#!/bin/bash

. k8s-read-config "$@"

if [ -z "$EXTERNAL_REGISTRY_BASE_DOMAIN" ]; then echo EXTERNAL_REGISTRY_BASE_DOMAIN must be set; exit 1; fi
if [ -z "$REPOSITORY_NAME" ];               then echo REPOSITORY_NAME must be set; exit 1; fi
DOCKER_PULL_CMD='docker'

# # See http://stackoverflow.com/a/246128/90442
# SOURCE="${BASH_SOURCE[0]}"
# while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
#   TARGET="$(readlink "$SOURCE")"
#   if [[ $TARGET == /* ]]; then
#     SOURCE="$TARGET"
#   else
#     DIR="$( dirname "$SOURCE" )"
#     SOURCE="$DIR/$TARGET" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
#   fi
# done
# DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

case $EXTERNAL_REGISTRY_BASE_DOMAIN in
  *gcr.io*)
    DOCKER_PULL_CMD='gcloud docker -- pull'
    ;;

esac

# Warm the local docker cache (aka the local docker images) by pulling the previous commit and the images
# tagged with the current branch, if they exist.
# This should exit 0 even if the image is not there. For example, on a first run
PREVIOUS_COMMIT=$(git rev-parse HEAD~1)
CI_BRANCH=$(echo "${CI_BRANCH}" | tr / _)
$DOCKER_PULL_CMD "${EXTERNAL_REGISTRY_BASE_DOMAIN}/${REPOSITORY_NAME}:$PREVIOUS_COMMIT" || true
$DOCKER_PULL_CMD "${EXTERNAL_REGISTRY_BASE_DOMAIN}/${REPOSITORY_NAME}:$CI_BRANCH" || true
